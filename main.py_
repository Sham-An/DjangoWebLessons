#STR 44 52 57 61? 62 63 64-68?
#Часть 2 стр 74
# This is a sample Python script.

# Press Shift+F10 to execute it or replace it with your code.
# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.
"""Что делать если вы забали пароль от админки к django? Есть как минимум 2 решения проблемы.

Первое решение просто поменять пароль на root или другого суперпользователя, которого вы создали при создании базы данных. Для этого входим в manage.py shell

python manager.py shell

и набираем

>>>from django.contrib.auth.models import User
>>>user = User.objects.get( username='root')
>>>user.set_password(«password»)
>>>user.save()
Второй способ еще проще, он также пригодится если вы вместе с паролем забыли и логин от админки,
в этом случае можно создать нового суперпользователя, для этого в терминале вводим

python manage.py createsuperuser
 И вводим новые данные."""

3.2. Создание проекта Django
django-admin startproject <имя проекта> [<путь к папке проекта>]
3.4.1. Создание приложений
Создание приложение выполняется командой startapp утилиты manage.ру, записываемой в формате:
manage.ру startapp <имя приложения> [<путь к папке пакета приложения>]
Если путь к папке пакета приложения не указан, то папка пакета приложения с заданным именем будет создана в папке проекта.

СТР 76
Вот параметры баз данных, поддерживаемые Django:
□ engine — формат используемой базы данных. Указывается как путь к модулю,
реализующему работу с нужным форматом баз данных, в виде строки. Доступны
следующие значения:
SQLite;
• django.db.backends.sqlite3—
• django.db.backends.mysql —
• django.db.backends.postgresql —
• django.db.backends.oracle —
MySQL;
PostgreSQL;
Oracle;

DATABASES = {
    ’default’:{
        'ENGINE’: ’dj ango.db.backends.mysql',
        ’HOST’: ’localhost’,
        ’USER’: ’siteuser’,
        ’PASSWORD’:’sitepassword’,
        ’NAME’:’site'
    }
}

Задаем использование интернет-адреса 1.2.3.4 и порта № 4000:
manage.py runserver 1.2.3.4:4000


4.2.3. Создание полей со списком СТР 92
Поле со списком способно хранить значение из ограниченного набора, заданного
в особом перечне. Поле со списком может иметь любой тип, но наиболее часто
применяются строковые и целочисленные поля.
В веб-форме поля со списком представляются в виде раскрывающегося списка, пе­
речисляющего все возможные значения для ввода (может быть заменен обычным
списком; как это сделать, будет рассмотрено в главе 13).
Перечень значений для выбора заносится в параметр choices конструктора поля
и может быть задан в виде:
□ последовательности — списка или кортежа, каждый элемент которого представ­
ляет отдельное значение и записывается в виде последовательности из двух эле­
ментов:
• значения, которое будет непосредственно записано в поле (назовем его внут­
ренним). Оно должно принадлежать к типу, поддерживаемому полем (так,
если поле имеет строковый тип, то значение должно представлять собой
строку);
• значения, которое будет выводиться в виде пункта раскрывающегося списка
(внешнее), должно представлять собой строку.
Параметру choices присваивается непосредственно последовательность с переч­
нем значений.
Пример задания для поля kind списка из трех возможных значений:
class Bb(models.Model):
KINDS = (
’Куплю'),
’Продам’) ,
’ Обменяю'),Глава 4. Модели: базовые инструменты
93
kind = models.CharField(max_length=l, choices=KINDS, default='s’)
Значения из перечня можно объединять в группы. Каждая группа создается по­
следовательностью из двух элементов: текстового названия группы, выводимого
на экран, и последовательности из значений описанного ранее формата.
Для примера разобьем перечень позиций kinds на группы ’’Купля-продажа” и
’’Обмен”:
class Bb(models.Model) :
KINDS = (
(’ Купля-продажа ’,
(’b’,
(’s’,
)),
(’ Обмен ’,
(’C,
(
’ Куплю ’),
’Продам’),
(
’ Обменяю ’),
))
)
kind = models.CharField(max_length=l, choices=KINDS, default=’s’)

4.4. Параметры самой модели 101
Параметры самой модели описываются различными атрибутами класса Meta, вло­
женного в класс модели и не являющегося производным ни от какого класса. Вот
список этих атрибутов:
□ verbose name — название

4.7.1. Стандартные валидаторы Django СТР 111

ГЛАВА 5 СТР 118
МИГРАЦИИ

ГЛАВА 6
Запись данных СТР 123

6.2. Создание записей
Создать новую запись в модели можно тремя способами:
□ создать новый экземпляр класса модели, вызвав конструктор без параметров,
занести в поля нужные значения и сохранить запись, вызвав у нее метод save ():
»> from bboard.models import Rubric
»> r = Rubric ()
»> r.name = ’Бытовая техника’
»> r. save ()
□ создать новый экземпляр класса модели, указав значения полей в вызове конст­
руктора — через одноименные параметры, и сохранить запись:
»> г = Rubric(пате=’Сельхозинвентарь’)
»> г. save ()
□ все классы моделей поддерживают атрибут objects, в котором хранится диспет­
чер записей — объект, представляющий все хранящиеся в модели записи и яв­
ляющийся экземпляром класса Manager ИЗ модуля django.db.models.
Класс Manager поддерживает метод create (), который принимает с именованны­
ми параметрами значения полей создаваемой записи, создает эту запись, сразу
же сохраняет и возвращает в качестве результата. Вот пример использования
этого метода:
»> г = Rubriс.objects.create(name=’Мебель’)
»> r.pk

6.6. Обработка связанных записей СТР 127
Django предоставляет ряд инструментов для удобной работы со связанными запися­
ми: создания, установления и удаления связи.
6.6.1. Обработка связи "один-со-многими"
Связать запись вторичной модели с записью первичной модели



******************************************
def print_hi(name):
    # Use a breakpoint in the code line below to debug your script.
    print(f'Hi, {name}')  # Press Ctrl+F8 to toggle the breakpoint.
    print( __name__)

# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    print_hi('PyCharm ' )

# See PyCharm help at https://www.jetbrains.com/help/pycharm/
